/**
 * @file
 * Positioning for a responsive layout.
 *
 * Define CSS classes to create a fluid grid layout with optional sidebars
 * depending on whether blocks are placed in the left or right sidebars.
 *
 * This layout uses the Zen Grids plugin for Compass: http://zengrids.com
 */

// We are going to create a fluid grid with 1, 3, or 5 columns and 20px gutters
// between columns (applied as 10px of left/right padding on each column).
$zen-column-count:  1;
$zen-gutter-width:  10px;

// If you need IE6/7 support for box-sizing: border-box (default), see _init.scss
//$zen-box-sizing: content-box;

// You can generate more efficient CSS if you manually apply the
// zen-grid-item-base mixin to all grid items from within a single ruleset.
$zen-auto-include-item-base: false;
// $zen-auto-include-flow-item-base: false;

// Suppress this section of CSS for RTL layouts since it contains no LTR-specific styles.
@if $zen-reverse-all-floats == false {

/**
 * Center the page.
 *
 * For screen sizes larger than 1200px, prevent excessively long lines of text
 * by setting a max-width.
 */
#page,
.region-bottom {
  margin-left: auto;
  margin-right: auto;
  max-width: 1920px;
}

/* Apply the shared properties of grid items in a single, efficient ruleset. */
#header,
#content,
#navigation,
.region-sidebar-first,
.region-sidebar-second,
#footer {
  // See the note about $zen-auto-include-item-base above.
  @include zen-grid-item-base();
}

/* Containers for grid items and flow items. */
#header,
#main,
#footer {
  @include zen-grid-container();
}

/* Navigation bar */
@media all and (max-width: 479px) {
  #header {
    text-align:center;
    #logo {
      float:none;
    }
  }
}

@media all and (min-width: 480px) {
  #main {
    /* Move all the children of #main down to make room. */
    position: relative;
  }
  #navigation {
    /* Move the navbar up inside #main's padding. */
    top: 0;
    height: $nav-height;
    width: 100%;
  }
}

} // End of @if $zen-reverse-all-floats == true

@media all and (min-width: 480px) and (max-width: 959px) {

  $zen-column-count: 4;

  .two-sidebars {
    #content {
      @include zen-grid-item(3, 2);
    }

    .region-sidebar-first {
      @include zen-grid-item(1, 1);
    }

    .region-sidebar-second {
      @include zen-grid-item(4, 1);
      @include zen-nested-container(); // Since we're making every block in this region be a grid item.
      @include zen-clear();

      .block {
        @include zen-grid-item-base(); // Apply the shared properties of grid items in a single, efficient ruleset.
      }
      .block:nth-child(4n+1) {
        @include zen-grid-item(1, 1);
        @include zen-clear(); // clear to pass to next line
      }
      .block:nth-child(4n+2) {
        @include zen-grid-item(1, 2);
      }
      .block:nth-child(4n+3) {
        @include zen-grid-item(1, 3);
      }
      .block:nth-child(4n+4) {
        @include zen-grid-item(1, 4);
      }
    }
  }
}

@media all and (min-width: 960px) and (max-width: 1279px) {

  $zen-column-count: 6;

  .two-sidebars {
  #content {
      @include zen-grid-item(4, 2);
    }

    .region-sidebar-first {
      @include zen-grid-item(1, 1);
    }

    .region-sidebar-second {
      @include zen-grid-item(1, 6);
    }
  }
}

@media all and (min-width: 1280px) {

  $zen-column-count: 8;

  .two-sidebars {
    #content {
      @include zen-grid-item(5, 2);
    }

    .region-sidebar-first {
      @include zen-grid-item(1, 1);
    }

    .region-sidebar-second {
      @include zen-grid-item(2, 7);
    }
  }
}
